#I need to have a constant stockTest.json file 
#Variables should not change they should be constant in test


#Both Work on either side same thing
#Given / Arrange (OPTIONAL)

#When / Act 

#Then / Assert


#dependcy injection
    Definition:
    Dependcy injection generally means passing a dependt object as a paarameter to a method, rather than having the 
    method create the dependent object

    What it means is in practice that the method does not have a direct dependency ona particular implementation any
    implementation that meets the requirments can be passed as a parameter

ACT can only be one line 

NOTES FROM API TEST OLD
# TOP Playlist on youtube for Api tests https://www.youtube.com/watch?v=OdFW3RwAz8w&list=PLIMhDiITmNrILoYaVsrxwteH6LqMr07uX&index=5&ab_channel=TestingWorld
# If in the terminal I type pytest TestCases so the module and the folder name then  
#       In my class I need to write unittest.TestCase linke BELOW

# Link: https://stackoverflow.com/questions/34363388/pytest-no-tests-ran

#Some issues with requests post and requests put

#pytest TestCases

#pytest -v TestCases "WITH THIS I CAN SEE HOW LONG AND WHIHC TEST HAS FAILED"

#Professor told me to do: 

#Checks if the json is correct
# Calls the thrid party api and check if it has the correct response
# Mock thridparty api 
#  Need a framwork for testing (pytest)


def checking_ticker(self, ticker_symbol, ticker_symbol_table):
        self.already_exist = False
        for i in range(len(ticker_symbol_table)):
            if ticker_symbol == ticker_symbol_table[i]:
                print("This Ticker is already existing in the Database")
                self.already_exist = True
                return self.already_exist


    #def api_request_to_json(self,request):
     #   if self.already_exist == False:    
      #      file1 = open(f"{request}.json","w") 
       #     file1.write(api_request(request))
        #    file1.close()
         #   print("Stock Data has been added to Json")
        #if self.already_exist == True:
         #   file1 = open(f"{request}.json", "w")
          #  file1.write("")
           # file1.close()


    Database
    def get_ticker_table_list(self):

        conn = ORM_services.connecting_to_server()

        with conn: 
                with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
                    cur.execute("SELECT stock.ticker_symbol FROM stock")
                    self.ticker_table = cur.fetchall()

        #json_ticker_symbol = self.data['get-statistics']['symbol']
        #self.ticker_symbol = "['" + json_ticker_symbol + "']"
        
        return self.ticker_table



        #for i in range(len(self.ticker_table)):
          #  if self.ticker_symbol != str(self.ticker_table[i]):
         #       self.already_exists_in_DB = False
        #duplicated code
        #for i in range(len(self.ticker_table)):
           # if self.ticker_symbol == str(self.ticker_table[i]):
          #      print("This Ticker is already existing in the Database")
         #       self.already_exists_in_DB = True

        #if len(self.ticker_table) == 0:
       #     print("There is nothing in the ticker_symbol Table")
      #      self.already_exists_in_DB = False



        API
  #  def checking_if_ticker_exists(self,ticker_symbol, ticker_symbol_table):
   #     for i in range(len(ticker_symbol_table)):
    #        if ticker_symbol == ticker_symbol_table[i]:
       #         print("This Ticker is already existing in the Database")
     #           self.already_exist = True
      #          return self.already_exist
            
       # for i in range(len(ticker_symbol_table)):
        #    if ticker_symbol != str(ticker_symbol_table[i]):
         #       print("This Ticker does not yet exists in the Database")
          #      self.already_exist = False
            
       # if len(ticker_symbol_table) == 0:
        #    print("There is nothing in the ticker_symbol Table")
         #   self.already_exist = False
        
       # return self.already_exist



GOOGLE MOCK EXAMPLE 

def google_query(query):
    """
    trivial function that does a GET request
    against google, checks the status of the
    result and returns the raw content
    """
    url = "https://www.google.com"
    params = {'q': query}
    resp = requests.get(url, params=params)
    resp.raise_for_status()
    return resp.content


class TestRequestsCall(unittest.TestCase):
    """
    example text that mocks requests.get and
    returns a mock Response object
    """
    def _mock_response(
            self,
            status=200,
            content="CONTENT",
            json_data=None,
            raise_for_status=None):
        """
        since we typically test a bunch of different
        requests calls for a service, we are going to do
        a lot of mock responses, so its usually a good idea
        to have a helper function that builds these things
        """
        mock_response = mock.Mock()
        # mock raise_for_status call w/optional error
        mock_response.raise_for_status = mock.Mock()
        if raise_for_status:
            mock_response.raise_for_status.side_effect = raise_for_status
        # set status code and content
        mock_response.status_code = 200
        mock_response.content = "CONTENT"
        # add json data if provided
        if json_data:
            mock_response.json = mock.Mock(
                return_value=json_data
            )
        return mock_response

    @mock.patch('requests.get')
    def test_google_query(self, mock_get):
        """test google query method"""
        mock_response = self._mock_response(content="ELEPHANTS")
        mock_get.return_value = mock_response

        result = google_query('elephants')
        self.assertEqual(result, 'ELEPHANTS')
        self.assertTrue(mock_resp.raise_for_status.called)

    @mock.patch('requests.get')
    def test_failed_query(self, mock_get):
        """test case where google is down"""
        mock_response = self._mock_response(status=500, raise_for_status=HTTPError("google is down"))
        mock_get.return_value = mock_response
        self.assertRaises(HTTPError, google_query, 'elephants')

#if __name__ == '__main__':
#    unittest.main()
